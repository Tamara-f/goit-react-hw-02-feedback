{"version":3,"sources":["components/Section.js","components/Feedback/FeedbackOptions.js","components/Statistics/Statistics.js","components/Notification.js","components/App.js","index.js"],"names":["Section","title","children","defaultProps","FeedbackOptions","onLeaveFeedback","type","onClick","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","state","feedback","countPositiveFeedbackPercentage","Math","round","countTotalFeedback","hendleFeedback","e","field","target","textContent","setState","prevState","states","this","Component","ReactDOM","render","document","querySelector"],"mappings":"wPAGA,SAASA,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,iCACE,4BAAKD,GACJC,GAKPF,EAAQG,aAAe,CACrBF,MAAO,IAMMD,QCCAI,EAjBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,gBAAH,OACtB,oCACE,4BAAQC,KAAK,SAASC,QAASF,GAA/B,QAGA,4BAAQC,KAAK,SAASC,QAASF,GAA/B,WAGA,4BAAQC,KAAK,SAASC,QAASF,GAA/B,SCaWG,EArBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,oCACE,yCAEE,qCAAWJ,GACX,wCAAcC,GACd,oCAAUC,GACV,sCAAYC,GACZ,kDAAwBC,EAAxB,SCGSC,EAXM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OACE,oCACE,2BAAIA,KCCWC,E,4MACnBC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPO,SAAW,E,EACXN,MAAQ,E,EAERO,gCAAkC,WAChC,OAAsB,IAAf,EAAKP,MACRQ,KAAKC,MAAyB,IAAlB,EAAKJ,MAAMR,KAAc,EAAKG,OAC1C,K,EAENU,mBAAqB,WACnB,EAAKV,OAAS,G,EAGhBW,eAAiB,SAAAC,GACf,IAAMC,EAAQD,EAAEE,OAAOC,YACvB,EAAKC,UAAS,SAAAC,GACZ,OAAO,eACJJ,EAAQI,EAAUJ,GAAS,MAIhC,EAAKH,sB,uDAIL,IAAMQ,EAASC,KAAKd,MACpB,OACE,6BACE,kBAAC,EAAD,CAAShB,MAAM,yBACb,kBAAC,EAAD,CAAiBI,gBAAiB0B,KAAKR,kBAGzC,kBAAC,EAAD,KACGQ,KAAKnB,MAAQ,EACZ,kBAAC,EAAD,CACEH,KAAMqB,EAAOrB,KACbC,QAASoB,EAAOpB,QAChBC,IAAKmB,EAAOnB,IACZC,MAAOmB,KAAKnB,MACZC,mBAAoBkB,KAAKZ,oCAG3B,kBAAC,EAAD,CAAcJ,QAAQ,4B,GAhDDiB,aCFjCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.8533f2fc.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <section>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.defaultProps = {\r\n  title: '',\r\n};\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node.isRequired,\r\n};\r\nexport default Section;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FeedbackOptions = ({ onLeaveFeedback }) => (\r\n  <>\r\n    <button type='button' onClick={onLeaveFeedback}>\r\n      good\r\n    </button>\r\n    <button type='button' onClick={onLeaveFeedback}>\r\n      neutral\r\n    </button>\r\n    <button type='button' onClick={onLeaveFeedback}>\r\n      bad\r\n    </button>\r\n  </>\r\n);\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <>\r\n    <ul>\r\n      Statistics\r\n      <li>Good: {good}</li>\r\n      <li>Neutral: {neutral}</li>\r\n      <li>Bad: {bad}</li>\r\n      <li>Total: {total}</li>\r\n      <li>Positive feedback: {positivePercentage} %</li>\r\n    </ul>\r\n  </>\r\n);\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => {\r\n  return (\r\n    <>\r\n      <p>{message}</p>\r\n    </>\r\n  );\r\n};\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import React, { Component } from 'react';\n\nimport Section from './Section';\nimport FeedbackOptions from './Feedback/FeedbackOptions';\nimport Statistics from './Statistics/Statistics';\nimport Notification from './Notification';\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  feedback = 0;\n  total = 0;\n\n  countPositiveFeedbackPercentage = () => {\n    return this.total !== 0\n      ? Math.round((this.state.good * 100) / this.total)\n      : '0';\n  };\n  countTotalFeedback = () => {\n    this.total += 1;\n  };\n\n  hendleFeedback = e => {\n    const field = e.target.textContent;\n    this.setState(prevState => {\n      return {\n        [field]: prevState[field] + 1,\n      };\n    });\n\n    this.countTotalFeedback();\n  };\n\n  render() {\n    const states = this.state;\n    return (\n      <div>\n        <Section title='Please leave feedback'>\n          <FeedbackOptions onLeaveFeedback={this.hendleFeedback} />\n        </Section>\n\n        <Section>\n          {this.total > 0 ? (\n            <Statistics\n              good={states.good}\n              neutral={states.neutral}\n              bad={states.bad}\n              total={this.total}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message='No feedback given' />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}